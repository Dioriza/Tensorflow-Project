{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "colab": {
      "name": "Sentiment Analysis Gojek Bi-LSTM.ipynb",
      "provenance": [],
      "collapsed_sections": []
    },
    "kernelspec": {
      "name": "python3",
      "display_name": "Python 3"
    }
  },
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "2w93C9UMPHnj",
        "colab_type": "text"
      },
      "source": [
        "# Import Package"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "OuCVVn_zipBv",
        "colab_type": "code",
        "colab": {}
      },
      "source": [
        "import pandas as pd\n",
        "import numpy as np\n",
        "import zipfile\n",
        "import re\n",
        "\n",
        "from sklearn.model_selection import train_test_split\n",
        "\n",
        "import tensorflow as tf\n",
        "from tensorflow.keras.preprocessing.sequence import pad_sequences\n",
        "from tensorflow.keras.layers import Embedding, LSTM, Dense, Bidirectional, Dropout\n",
        "from tensorflow.keras.preprocessing.text import Tokenizer\n",
        "from tensorflow.keras.models import Sequential"
      ],
      "execution_count": 1,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "RvzD3I6vPPcI",
        "colab_type": "text"
      },
      "source": [
        "# Import Dataset"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "z3lGyfxLx6BA",
        "colab_type": "text"
      },
      "source": [
        "Dataset yang akan dijadikan uji sentiment analysis adalah Dataset review aplikasi Gojek yang terdapat di playstore. Memiliki dua sentiment yang akan dianalisa yaitu **Positive** dan **Negative**"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "aOgjNYzNNrfp",
        "colab_type": "code",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 289
        },
        "outputId": "dcebc2c7-d7ed-486f-8a9c-77d5e629b5f8"
      },
      "source": [
        "!wget https://github.com/WiraDKP/word_vector/raw/master/22%20-%20Word%20Vector/data.zip"
      ],
      "execution_count": 2,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "--2020-08-05 04:25:36--  https://github.com/WiraDKP/word_vector/raw/master/22%20-%20Word%20Vector/data.zip\n",
            "Resolving github.com (github.com)... 140.82.113.4\n",
            "Connecting to github.com (github.com)|140.82.113.4|:443... connected.\n",
            "HTTP request sent, awaiting response... 302 Found\n",
            "Location: https://raw.githubusercontent.com/WiraDKP/word_vector/master/22%20-%20Word%20Vector/data.zip [following]\n",
            "--2020-08-05 04:25:36--  https://raw.githubusercontent.com/WiraDKP/word_vector/master/22%20-%20Word%20Vector/data.zip\n",
            "Resolving raw.githubusercontent.com (raw.githubusercontent.com)... 151.101.0.133, 151.101.64.133, 151.101.128.133, ...\n",
            "Connecting to raw.githubusercontent.com (raw.githubusercontent.com)|151.101.0.133|:443... connected.\n",
            "HTTP request sent, awaiting response... 200 OK\n",
            "Length: 184047 (180K) [application/zip]\n",
            "Saving to: ‘data.zip’\n",
            "\n",
            "\rdata.zip              0%[                    ]       0  --.-KB/s               \rdata.zip            100%[===================>] 179.73K  --.-KB/s    in 0.04s   \n",
            "\n",
            "2020-08-05 04:25:36 (4.09 MB/s) - ‘data.zip’ saved [184047/184047]\n",
            "\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "i43imz6_NtBp",
        "colab_type": "code",
        "colab": {}
      },
      "source": [
        "local_zip = 'data.zip'\n",
        "zip_ref = zipfile.ZipFile(local_zip, 'r')\n",
        "zip_ref.extractall('/tmp')\n",
        "zip_ref.close()"
      ],
      "execution_count": 3,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "DRmNEo5vi63D",
        "colab_type": "code",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 204
        },
        "outputId": "d87f8613-8293-465d-8c22-f479d3d7894e"
      },
      "source": [
        "df = pd.read_csv('/tmp/data/gojek_review_sentiment.csv')\n",
        "df.head()"
      ],
      "execution_count": 4,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/html": [
              "<div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>review</th>\n",
              "      <th>rate</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>Apa aplikasi yang bagus untuk dengan mudah per...</td>\n",
              "      <td>positive</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>Aplikasi ini banyak membantu saya. Sekarang sa...</td>\n",
              "      <td>positive</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>Mengerikan. Antarmukanya sangat membingungkan....</td>\n",
              "      <td>negative</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>Aplikasi yang cukup mengesankan. Butuh waktu l...</td>\n",
              "      <td>positive</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>Aplikasi ini sebenarnya bagus dan sangat memba...</td>\n",
              "      <td>positive</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>"
            ],
            "text/plain": [
              "                                              review      rate\n",
              "0  Apa aplikasi yang bagus untuk dengan mudah per...  positive\n",
              "1  Aplikasi ini banyak membantu saya. Sekarang sa...  positive\n",
              "2  Mengerikan. Antarmukanya sangat membingungkan....  negative\n",
              "3  Aplikasi yang cukup mengesankan. Butuh waktu l...  positive\n",
              "4  Aplikasi ini sebenarnya bagus dan sangat memba...  positive"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 4
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "fbflP-l4i_Sj",
        "colab_type": "code",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 34
        },
        "outputId": "21c19245-1304-497c-a0da-325304897f16"
      },
      "source": [
        "df.shape"
      ],
      "execution_count": 5,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "(1782, 2)"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 5
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "tLBDlH9u3_wk",
        "colab_type": "code",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 52
        },
        "outputId": "1cdfdc1d-0ecb-4b50-d0e8-5c5c16dc8404"
      },
      "source": [
        "df['review'][0]"
      ],
      "execution_count": 6,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "application/vnd.google.colaboratory.intrinsic+json": {
              "type": "string"
            },
            "text/plain": [
              "'Apa aplikasi yang bagus untuk dengan mudah pergi ke mana saja jika kita tidak memiliki sepeda motor atau ingin pergi dalam perjalanan kelompok, kita dapat menggunakan gocar dan perjalanan yang menyenangkan adalah suatu keharusan, jadi saya pikir gojek memberi kita banyak situasi nyaman selama mengendarai. Dan saya suka gofood! Saya pikir itu sudah cukup.'"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 6
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "TP97tcCKPB7r",
        "colab_type": "text"
      },
      "source": [
        "# Data Cleaning"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "SlNffzJ-OSOE",
        "colab_type": "code",
        "colab": {}
      },
      "source": [
        "#copy dataset for evaluate\n",
        "df_before = df.copy()\n",
        "\n",
        "def review_cleaning(text):\n",
        "    \n",
        "    # delete lowercase and newline\n",
        "    text = text.lower()\n",
        "    text = re.sub(r'\\n', '', text)\n",
        "    \n",
        "    # delete punctuation\n",
        "    text = re.sub('[^a-z0-9 ]', ' ', text)\n",
        "    \n",
        "    tokenizer = text.split()\n",
        "    \n",
        "    return ' '.join([text for text in tokenizer])"
      ],
      "execution_count": 7,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "VhXoStELOSQr",
        "colab_type": "code",
        "colab": {}
      },
      "source": [
        "df['review'] = df['review'].apply(review_cleaning)"
      ],
      "execution_count": 8,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "cXd9ZiCfPkBw",
        "colab_type": "code",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 34
        },
        "outputId": "560dc052-7025-4f8d-dcfa-e5a967b95e74"
      },
      "source": [
        "test = \"Aku seeeeneeeeeng bangggeeeettt make Gofood. Jadi simple semuanyaaaa. beneeeraaaan tidak usah repot keluar rumah\"\n",
        "print(re.sub(r'(\\w)\\1{2,}', r'\\1', test))"
      ],
      "execution_count": 9,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "Aku seneng banget make Gofood. Jadi simple semuanya. beneran tidak usah repot keluar rumah\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "2pT05UHWPkQo",
        "colab_type": "code",
        "colab": {}
      },
      "source": [
        "def delete_repeated_char(text):\n",
        "    \n",
        "    text = re.sub(r'(\\w)\\1{,}', r'\\1', text)\n",
        "    \n",
        "    return text"
      ],
      "execution_count": 10,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "lonZiyqgWutV",
        "colab_type": "code",
        "colab": {}
      },
      "source": [
        "df['review'] = df['review'].apply(delete_repeated_char)"
      ],
      "execution_count": 11,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "OVjRdynzRbZz",
        "colab_type": "code",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 102
        },
        "outputId": "ef168685-1d63-4dc1-e669-8dd0a45df132"
      },
      "source": [
        "print('Before: ', df_before.loc[674, 'review'])\n",
        "print('After: ', df.loc[674, 'review'])\n",
        "\n",
        "print('\\nBefore: ', df_before.loc[1441, 'review'])\n",
        "print('After: ', df.loc[1441, 'review'])"
      ],
      "execution_count": 12,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "Before:  update jadi banyak masalah .. server sibuk .. top up susah .. ga banyak pilihan .. soooo baaad\n",
            "After:  update jadi banyak masalah server sibuk top up susah ga banyak pilihan so bad\n",
            "\n",
            "Before:  Berguna! tidak hanya untuk transportasi tetapi juga untuk pembayaran, restoran dll. Loveeeee it ..\n",
            "After:  berguna tidak hanya untuk transportasi tetapi juga untuk pembayaran restoran dl love it\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "XqsMTrOYX_KV",
        "colab_type": "text"
      },
      "source": [
        "# Data Preparation"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "4gBbSuq4kBCp",
        "colab_type": "code",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 68
        },
        "outputId": "93ef7278-a031-4139-971c-a38baa085dcf"
      },
      "source": [
        "df['rate'] = df['rate'].replace({'positive': 1})\n",
        "df['rate'] = df['rate'].replace({'negative': 0})\n",
        "df['rate'].value_counts()"
      ],
      "execution_count": 13,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "0    1061\n",
              "1     721\n",
              "Name: rate, dtype: int64"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 13
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "LOd3xPL2jCcZ",
        "colab_type": "code",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 34
        },
        "outputId": "724600e1-341c-4ea5-be71-636762216525"
      },
      "source": [
        "X = df['review'].values\n",
        "y = df['rate'].values\n",
        "\n",
        "X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)\n",
        "X_train.shape, X_test.shape, y_train.shape, y_test.shape"
      ],
      "execution_count": 14,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "((1425,), (357,), (1425,), (357,))"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 14
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "ZuipWZRA5BNk",
        "colab_type": "code",
        "colab": {}
      },
      "source": [
        "X_train = np.array(X_train)\n",
        "X_test = np.array(X_test)\n",
        "y_train = np.array(y_train)\n",
        "y_test = np.array(y_test)"
      ],
      "execution_count": 15,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "wUeMrgs-mn_N",
        "colab_type": "code",
        "colab": {}
      },
      "source": [
        "vocab_size = 1000\n",
        "embedding_dim = 16\n",
        "max_length = 120\n",
        "trunc_type='post'\n",
        "padding_type='post'\n",
        "oov_tok = \"~\"\n",
        "\n",
        "tokenizer = Tokenizer(num_words=vocab_size, oov_token=oov_tok)\n",
        "tokenizer.fit_on_texts(X_train)\n",
        "tokenizer.fit_on_texts(X_test)\n",
        "\n",
        "word_index = tokenizer.word_index\n",
        "\n",
        "training_sequences = tokenizer.texts_to_sequences(X_train)\n",
        "training_padded = pad_sequences(training_sequences, maxlen=max_length, padding=padding_type, truncating=trunc_type)\n",
        "\n",
        "testing_sequences = tokenizer.texts_to_sequences(X_test)\n",
        "testing_padded = pad_sequences(testing_sequences, maxlen=max_length, padding=padding_type, truncating=trunc_type)\n"
      ],
      "execution_count": 16,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "h8_so4T_zICR",
        "colab_type": "text"
      },
      "source": [
        "# Model LSTM Bidirectional"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "UDS6qx8yzRB1",
        "colab_type": "text"
      },
      "source": [
        "Cara kerja dari LSTM Bidirectional adalah menjalankan input dua arah kedalam dua cara, satu dari masa lalu ke masa depan dan satu dari masa depan ke masa lalu dan apa yang berbeda dari pendekatan ini adalah berbeda dengan Unidirectional LSTM yang berjalan mundur saat menyimpan informasi dari masa depan dan menggunakan dua *hidden state* digabungkan pada suatu pada suatu titik waktu untuk menyimpan informasi dari masa lalu dan masa depan.\n",
        "\n",
        "Point pentingnya adalah Bidirectional LSTM menunjukkan hasil yang sangat baik karena mereka dapat memahami konteks dengan lebih baik, saya akan mencoba menjelaskan melalui contoh.\n",
        "\n",
        "Katakanlah kita mencoba untuk memprediksi kata berikutnya dalam sebuah kalimat, pada tingkat tinggi apa yang LSTM searah akan lihat adalah\n",
        "\n",
        "**Anak-anak pergi ke ....**\n",
        "\n",
        "Dan akan mencoba memprediksi kata berikutnya hanya dengan konteks ini, dengan Bidirectional LSTM akan dapat melihat informasi lebih jauh kedepan misalnya\n",
        "\n",
        "Forward LSTM:\n",
        "\n",
        "**Anak-anak pergi ke ...**\n",
        "\n",
        "Backward LSTM:\n",
        "\n",
        "**... dan kemudian mereka keluar dari kolam renang**\n",
        "\n",
        "Dan cara ini juga bisa diterapkan melalui klasifikasi sentiment pada data tidak terstruktur seperti text. dan *it works* Karena pada dasarnya Gagasan di balik bidirectional adalah untuk menangkap informasi input sekitarnya. alhasil belajar lebih cepat daripada pendekatan satu arah."
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "bHvFBtvhzREe",
        "colab_type": "text"
      },
      "source": [
        "![alt text](https://miro.medium.com/max/609/1*c4yHwRQESwG5e0WsmW-zBw.gif)"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "5-LLSSg0nxvP",
        "colab_type": "code",
        "colab": {}
      },
      "source": [
        "model = tf.keras.Sequential([\n",
        "    tf.keras.layers.Embedding(vocab_size, embedding_dim, input_length=max_length),\n",
        "    tf.keras.layers.Bidirectional(tf.keras.layers.LSTM(100)),\n",
        "    tf.keras.layers.Dropout(0.2),\n",
        "    tf.keras.layers.Dense(512, activation='relu'),\n",
        "    tf.keras.layers.Dropout(0.5),\n",
        "    tf.keras.layers.Dense(1, activation='sigmoid')\n",
        "])"
      ],
      "execution_count": 17,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "ysUCD3-bn602",
        "colab_type": "code",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 357
        },
        "outputId": "b7e239cc-150e-4d16-8916-6ff7039d51aa"
      },
      "source": [
        "callback = tf.keras.callbacks.EarlyStopping(monitor=\"val_accuracy\", patience=10)\n",
        "\n",
        "model.compile(loss='binary_crossentropy',optimizer='adam',metrics=['accuracy'])\n",
        "model.summary()"
      ],
      "execution_count": 18,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "Model: \"sequential\"\n",
            "_________________________________________________________________\n",
            "Layer (type)                 Output Shape              Param #   \n",
            "=================================================================\n",
            "embedding (Embedding)        (None, 120, 16)           16000     \n",
            "_________________________________________________________________\n",
            "bidirectional (Bidirectional (None, 200)               93600     \n",
            "_________________________________________________________________\n",
            "dropout (Dropout)            (None, 200)               0         \n",
            "_________________________________________________________________\n",
            "dense (Dense)                (None, 512)               102912    \n",
            "_________________________________________________________________\n",
            "dropout_1 (Dropout)          (None, 512)               0         \n",
            "_________________________________________________________________\n",
            "dense_1 (Dense)              (None, 1)                 513       \n",
            "=================================================================\n",
            "Total params: 213,025\n",
            "Trainable params: 213,025\n",
            "Non-trainable params: 0\n",
            "_________________________________________________________________\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "kn2G2uZEn9sG",
        "colab_type": "code",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 527
        },
        "outputId": "37e0bfef-7526-4457-9b9e-4992420e4c70"
      },
      "source": [
        "num_epochs = 100\n",
        "\n",
        "history = model.fit(training_padded, y_train, epochs=num_epochs, \n",
        "                    validation_data=(testing_padded, y_test), verbose=2, callbacks=[callback])"
      ],
      "execution_count": 19,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "Epoch 1/100\n",
            "45/45 - 7s - loss: 0.6113 - accuracy: 0.6653 - val_loss: 0.4572 - val_accuracy: 0.8571\n",
            "Epoch 2/100\n",
            "45/45 - 6s - loss: 0.3164 - accuracy: 0.8898 - val_loss: 0.2513 - val_accuracy: 0.9132\n",
            "Epoch 3/100\n",
            "45/45 - 6s - loss: 0.1946 - accuracy: 0.9312 - val_loss: 0.2574 - val_accuracy: 0.9076\n",
            "Epoch 4/100\n",
            "45/45 - 6s - loss: 0.1402 - accuracy: 0.9516 - val_loss: 0.2152 - val_accuracy: 0.9272\n",
            "Epoch 5/100\n",
            "45/45 - 6s - loss: 0.1037 - accuracy: 0.9663 - val_loss: 0.2412 - val_accuracy: 0.9328\n",
            "Epoch 6/100\n",
            "45/45 - 6s - loss: 0.0615 - accuracy: 0.9825 - val_loss: 0.4187 - val_accuracy: 0.8880\n",
            "Epoch 7/100\n",
            "45/45 - 6s - loss: 0.1097 - accuracy: 0.9628 - val_loss: 0.2952 - val_accuracy: 0.8683\n",
            "Epoch 8/100\n",
            "45/45 - 6s - loss: 0.0847 - accuracy: 0.9719 - val_loss: 0.3191 - val_accuracy: 0.9188\n",
            "Epoch 9/100\n",
            "45/45 - 6s - loss: 0.0394 - accuracy: 0.9860 - val_loss: 0.3765 - val_accuracy: 0.9020\n",
            "Epoch 10/100\n",
            "45/45 - 6s - loss: 0.0292 - accuracy: 0.9909 - val_loss: 0.4559 - val_accuracy: 0.9132\n",
            "Epoch 11/100\n",
            "45/45 - 6s - loss: 0.0175 - accuracy: 0.9937 - val_loss: 0.5353 - val_accuracy: 0.9020\n",
            "Epoch 12/100\n",
            "45/45 - 6s - loss: 0.0066 - accuracy: 0.9986 - val_loss: 0.5491 - val_accuracy: 0.9188\n",
            "Epoch 13/100\n",
            "45/45 - 6s - loss: 0.0029 - accuracy: 1.0000 - val_loss: 0.5929 - val_accuracy: 0.9216\n",
            "Epoch 14/100\n",
            "45/45 - 6s - loss: 0.0017 - accuracy: 1.0000 - val_loss: 0.6299 - val_accuracy: 0.9132\n",
            "Epoch 15/100\n",
            "45/45 - 6s - loss: 7.8835e-04 - accuracy: 1.0000 - val_loss: 0.6669 - val_accuracy: 0.9160\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "Tk5E7zG6qBEB",
        "colab_type": "text"
      },
      "source": [
        "# Plot Accuracy"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "w17BEqjnoht8",
        "colab_type": "code",
        "colab": {}
      },
      "source": [
        "import matplotlib.pyplot as plt\n",
        "\n",
        "\n",
        "def plot_graphs(history, string):\n",
        "  plt.plot(history.history[string])\n",
        "  plt.plot(history.history['val_'+string])\n",
        "  plt.xlabel(\"Epochs\")\n",
        "  plt.ylabel(string)\n",
        "  plt.legend([string, 'val_'+string])\n",
        "  plt.show()"
      ],
      "execution_count": 20,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "umAuD3Snp3qa",
        "colab_type": "code",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 279
        },
        "outputId": "cf2bbd6e-b5a0-401d-e0c2-e020679927a8"
      },
      "source": [
        "plot_graphs(history, 'accuracy')"
      ],
      "execution_count": 21,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "image/png": "\n",
            "text/plain": [
              "<Figure size 432x288 with 1 Axes>"
            ]
          },
          "metadata": {
            "tags": [],
            "needs_background": "light"
          }
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "O2-PN6ctp6eg",
        "colab_type": "code",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 283
        },
        "outputId": "03f41e7e-7cbf-450e-cc4d-a0ff0d101ac8"
      },
      "source": [
        "plot_graphs(history, 'loss')"
      ],
      "execution_count": 22,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "image/png": "\n",
            "text/plain": [
              "<Figure size 432x288 with 1 Axes>"
            ]
          },
          "metadata": {
            "tags": [],
            "needs_background": "light"
          }
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "8Qhsqt-uqG7I",
        "colab_type": "text"
      },
      "source": [
        "# Testing Model"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "0u4SwDtJqk2w",
        "colab_type": "code",
        "colab": {}
      },
      "source": [
        "def get_word(x):\n",
        "  x = tokenizer.texts_to_sequences(x)\n",
        "  x = pad_sequences(x, maxlen=50, padding=\"post\")\n",
        "  return x"
      ],
      "execution_count": 23,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "FAwp7aeS6K_6",
        "colab_type": "code",
        "colab": {}
      },
      "source": [
        "negative = ['aplikasi ini tidak berguna, scam, penipuan. Saya merasa dirugikan dengan aplikasi ini']\n",
        "positive = ['aplikasi ini sangat membantu hidup saya sehari-hari lewat layanan yang mudah digunakand seperti Gofood']\n",
        "n_sentiment = get_word(negative)\n",
        "p_sentiment = get_word(positive)"
      ],
      "execution_count": 24,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "8-pJB8ES7D2N",
        "colab_type": "code",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 156
        },
        "outputId": "2c321e47-0efd-4060-d0a4-7ebfc34246e6"
      },
      "source": [
        "pred = model.predict_classes(n_sentiment)\n",
        "print(negative,'\\n', \"Kalimat ini bermakna negatif, masuk kedalam kelas: \\n\", pred )"
      ],
      "execution_count": 25,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "WARNING:tensorflow:From <ipython-input-25-9678384b63cd>:1: Sequential.predict_classes (from tensorflow.python.keras.engine.sequential) is deprecated and will be removed after 2021-01-01.\n",
            "Instructions for updating:\n",
            "Please use instead:* `np.argmax(model.predict(x), axis=-1)`,   if your model does multi-class classification   (e.g. if it uses a `softmax` last-layer activation).* `(model.predict(x) > 0.5).astype(\"int32\")`,   if your model does binary classification   (e.g. if it uses a `sigmoid` last-layer activation).\n",
            "WARNING:tensorflow:Model was constructed with shape (None, 120) for input Tensor(\"embedding_input:0\", shape=(None, 120), dtype=float32), but it was called on an input with incompatible shape (None, 50).\n",
            "['aplikasi ini tidak berguna, scam, penipuan. Saya merasa dirugikan dengan aplikasi ini'] \n",
            " Kalimat ini bermakna negatif, masuk kedalam kelas: \n",
            " [[0]]\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "UJsw2lOnKtJ2",
        "colab_type": "code",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 68
        },
        "outputId": "ffd29da3-af4f-4208-b063-8de5f64eec79"
      },
      "source": [
        "pred = model.predict_classes(p_sentiment)\n",
        "print(positive,'\\n', \"Kalimat ini bermakna negatif, masuk kedalam kelas: \\n\", pred )"
      ],
      "execution_count": 26,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "['aplikasi ini sangat membantu hidup saya sehari-hari lewat layanan yang mudah digunakand seperti Gofood'] \n",
            " Kalimat ini bermakna negatif, masuk kedalam kelas: \n",
            " [[1]]\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "hcy3elIi222j",
        "colab_type": "text"
      },
      "source": [
        "## Referensi \n",
        "\n",
        "- Bi-LSTM, https://medium.com/@raghavaggarwal0089/bi-lstm-bc3d68da8bd0\n",
        "- Dataset, https://github.com/WiraDKP\n",
        "- Konsep Bi-LSTM, https://www.youtube.com/watch?v=Bp-_DatyUCY"
      ]
    }
  ]
}